// shared/contracts/plan-schema.ts

/**
 * @interface PlannerInputDTO
 * @description Input contract for the planner agent to generate execution plans.
 */
export interface PlannerInputDTO {
  /** The primary feature request or task description */
  request: string;
  
  /** Optional context about the project, tech stack, or existing artifacts */
  context?: {
    techStack?: string | string[];
    existingArtifacts?: string[];
    artifacts?: string[];
    relatedArtifacts?: string[];
    projectType?: string;
    constraints?: string[];
  };
  
  /** User preferences that influence planning decisions */
  preferences?: {
    prioritizeSpeed?: boolean;
    prioritizeQuality?: boolean;
    minimizeCost?: boolean;
    preferredAgents?: string[];
  };
  
  /** Hard constraints that must be respected */
  constraints?: {
    maxDuration?: number; // in minutes
    forbiddenAgents?: string[];
    requiredAgents?: string[];
    maxCost?: number;
    deadline?: string; // ISO date
  };
  
  /** Metadata for tracking and categorization */
  metadata?: {
    source?: string;
    category?: string;
    urgency?: 'low' | 'medium' | 'high';
    tags?: string[];
    requestedBy?: string;
  };
}

/**
 * @interface PlannerStepDTO
 * @description Individual step within an execution plan.
 */
export interface PlannerStepDTO {
  /** Unique identifier for this step */
  id: string;
  
  /** Human-readable name for this step */
  name: string;
  
  /** Type of work this step represents */
  type: 'analysis' | 'design' | 'implementation' | 'quality-assurance' | 'governance' | 'review' | 'testing';
  
  /** Which agent is responsible for this step */
  agent: string;
  
  /** Detailed description of what this step accomplishes */
  description: string;
  
  /** List of step IDs that must complete before this step can start */
  dependencies: string[];
  
  /** Expected outputs/deliverables from this step */
  expectedOutputs: string[];
  
  /** Estimated duration in minutes */
  estimatedDuration?: number;
  
  /** Additional metadata about this step */
  metadata?: {
    complexity?: 'simple' | 'medium' | 'complex';
    risk?: 'low' | 'medium' | 'high';
    requiredSkills?: string[];
    prerequisites?: string[];
    notes?: string[];
  };
}

/**
 * @interface PlannerPlanDTO
 * @description Complete execution plan generated by the planner agent.
 */
export interface PlannerPlanDTO {
  /** Unique identifier for this plan */
  planId: string;
  
  /** High-level description of what this plan accomplishes */
  description: string;
  
  /** Ordered list of steps to execute */
  steps: PlannerStepDTO[];
  
  /** Complete list of all artifacts that will be produced */
  artifacts: string[];
  
  /** Plan-level metadata and configuration */
  metadata: {
    /** When this plan was created */
    createdAt: string;
    
    /** Total estimated duration in minutes */
    estimatedDuration: number;
    
    /** List of all dependencies across all steps */
    dependencies: string[];
    
    /** Priority level for execution */
    priority: 'low' | 'medium' | 'high' | 'critical';
    
    /** Tags for categorization and filtering */
    tags: string[];
    
    /** Plan version */
    version: string;
    
    /** Optional success criteria */
    successCriteria?: string[];
    
    /** Optional risk assessment */
    riskAssessment?: {
      overall: 'low' | 'medium' | 'high';
      factors: string[];
      mitigations: string[];
    };
  };
}

/**
 * @interface PlannerExecutionResultDTO
 * @description Result of plan execution with status and outcomes.
 */
export interface PlannerExecutionResultDTO {
  /** The plan that was executed */
  plan: PlannerPlanDTO;
  
  /** Execution status */
  status: 'pending' | 'in_progress' | 'completed' | 'failed' | 'cancelled';
  
  /** Execution results per step */
  stepResults?: {
    [stepId: string]: {
      status: 'pending' | 'in_progress' | 'completed' | 'failed' | 'skipped';
      startedAt?: string;
      completedAt?: string;
      outputs?: string[];
      errors?: string[];
      metrics?: {
        duration?: number;
        resourcesUsed?: any;
      };
    };
  };
  
  /** Overall execution metrics */
  metrics?: {
    totalDuration?: number;
    stepsCompleted: number;
    stepsFailed: number;
    artifactsProduced: string[];
    errors: string[];
  };
  
  /** When execution started */
  startedAt?: string;
  
  /** When execution completed or failed */
  completedAt?: string;
}